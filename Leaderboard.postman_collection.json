{
	"info": {
		"_postman_id": "2576bf96-586b-493e-9f9f-abbed38c8e26",
		"name": "Leaderboard",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43337191",
		"_collection_link": "https://solar-station-546994.postman.co/workspace/Team-Workspace~38e47964-c885-4c85-8311-85336f1a6ad2/collection/43337191-2576bf96-586b-493e-9f9f-abbed38c8e26?action=share&source=collection_link&creator=43337191"
	},
	"item": [
		{
			"name": "Login (Get JWT Token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json = pm.response.json();",
							"pm.collectionVariables.set(\"jwt_token\", json.access_token);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{admin_username}}\",\n  \"password\": \"{{admin_password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				},
				"description": "Generated from cURL: curl -X POST http://localhost:5001/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n  }'\n"
			},
			"response": []
		},
		{
			"name": "Create User (admin only)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"jwt_token:\", pm.environment.get(\"jwt_token\"));",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"john1232\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Doe\",\n    \"gender\": \"male\",\n    \"score\": 0,\n    \"password\": \"password123\",\n    \"role\": \"user\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				},
				"description": "Generated from cURL: curl -X POST http://localhost:5001/users \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\" \\\n  -d '{\n    \"username\": \"john123\",\n    \"firstname\": \"John\",\n    \"lastname\": \"Doe\",\n    \"gender\": \"male\",\n    \"score\": 0,\n    \"password\": \"password123\",\n    \"role\": \"user\"\n  }'\n"
			},
			"response": []
		},
		{
			"name": "Get All Users (admin only)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {",
							"  const users = pm.response.json();",
							"",
							"  if (Array.isArray(users) && users.length > 0 && users[0].uuid) {",
							"    pm.environment.set(\"uuid\", users[0].uuid); // or use \"uuid\" if that's your field",
							"    console.log(\"user_id set to:\", users[0].uuid);",
							"  } else {",
							"    console.warn(\"‚ö†Ô∏è No users found or missing 'uuid' field\");",
							"  }",
							"} catch (e) {",
							"  console.error(\"‚ùå Failed to parse response:\", e);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				},
				"description": "Generated from cURL: curl -X GET http://localhost:5001/users \\\n  -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\"\n"
			},
			"response": []
		},
		{
			"name": "Get User by ID (admin only)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {",
							"  const users = pm.response.json();",
							"",
							"  if (Array.isArray(users) && users.length > 0 && users[0].uuid) {",
							"    pm.environment.set(\"user_id\", users[0].uuid); // üëà This matters",
							"    console.log(\"user_id (env) set to:\", users[0].uuid);",
							"  } else {",
							"    console.warn(\"‚ö†Ô∏è No users found or missing uuid\");",
							"  }",
							"} catch (e) {",
							"  console.error(\"‚ùå Failed to parse users:\", e);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				},
				"description": "Generated from cURL: curl -X GET http://localhost:5001/users/1 \\\n  -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\""
			},
			"response": []
		},
		{
			"name": "Partially Update User (admin only)",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"firstname\": \"nelson\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id}}"
					]
				},
				"description": "Generated from cURL: curl -X GET http://localhost:5001/users/1 \\\n  -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\"\n"
			},
			"response": []
		},
		{
			"name": "Delete User (admin only)",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id}}"
					]
				},
				"description": "Generated from cURL: curl -X DELETE http://localhost:5001/users/1 \\\n  -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\"\n"
			},
			"response": []
		},
		{
			"name": "Increase Score (admin only)",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/{{user_id}}/increase",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"increase"
					]
				},
				"description": "Generated from cURL: curl -X PATCH http://localhost:5001/users/1/increase \\\n  -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\"\n"
			},
			"response": []
		},
		{
			"name": "Decrease Score (admin only)",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/{{user_id}}/decrease",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"decrease"
					]
				},
				"description": "Generated from cURL: curl -X PATCH http://localhost:5001/users/1/decrease \\\n  -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\"\n"
			},
			"response": []
		},
		{
			"name": "Export CSV (admin only)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/export/csv",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"export",
						"csv"
					]
				},
				"description": "Generated from cURL: curl -X GET http://localhost:5001/export \\\n  -H \"Authorization: Bearer YOUR_ADMIN_JWT_TOKEN\" \\\n  -o leaderboard.csv"
			},
			"response": []
		},
		{
			"name": "Export PDF (admin only)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/export/pdf",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"export",
						"pdf"
					]
				},
				"description": "Generated from cURL: curl -X GET http://localhost:5001/export \\\n  -H \"Authorization: Bearer YOUR_ADMIN_JWT_TOKEN\" \\\n  -o leaderboard.csv"
			},
			"response": []
		},
		{
			"name": "Get leaderboard",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"try {",
							"  const users = pm.response.json();",
							"",
							"  if (Array.isArray(users) && users.length > 0 && users[0].uuid) {",
							"    pm.environment.set(\"uuid\", users[0].uuid); // or use \"uuid\" if that's your field",
							"    console.log(\"user_id set to:\", users[0].uuid);",
							"  } else {",
							"    console.warn(\"‚ö†Ô∏è No users found or missing 'uuid' field\");",
							"  }",
							"} catch (e) {",
							"  console.error(\"‚ùå Failed to parse response:\", e);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				},
				"description": "Generated from cURL: curl -X GET http://localhost:5001/users \\\n  -H \"Authorization: Bearer <YOUR_JWT_TOKEN>\"\n"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "jwt_token",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "base_url",
			"value": "http://localhost:5001",
			"type": "string"
		},
		{
			"key": "admin_username",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "admin_password",
			"value": "admin",
			"type": "string"
		}
	]
}